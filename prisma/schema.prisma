generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String?
  role                  UserRoles              @default(MURID)
  plan                  UserPlan               @default(FREE)
  emailVerified         DateTime?
  image                 String?
  password              String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  sessions              Session[]
  authoredArticles      Article[]              @relation("ArticleAuthor")
  authoredCourses       Course[]               @relation("CourseAuthor")
  createdLiveSessions   LiveSession[]          @relation("LiveSessionCreator")
  moduleCompletions     UserModuleCompletion[]
  vocabularyCollections VocabularyCollection[]
  pushNotifications     PushNotification[]
  joinedCourses         Course[]               @relation("CourseMembers")
  joinedLiveSessions    LiveSession[]          @relation("LiveSessionParticipants")
  soals                 Soal[]                 @relation("SoalAuthor")
  drawings              ExcalidrawDrawing[]
  tryoutParticipations  TryoutParticipant[]
}

model Course {
  id              Int          @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription String?
  htmlDescription String?
  level           CourseLevel
  thumbnail       String?
  icon            String?
  isCompleted     Boolean      @default(false)
  isLocked        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  authorId        String
  author          User         @relation("CourseAuthor", fields: [authorId], references: [id])
  modules         Module[]     @relation("CourseModules")
  liveSessions    LiveSession[] @relation("CourseLiveSessions")
  members         User[]       @relation("CourseMembers")
}

model LiveSession {
  id              String   @id @default(cuid())
  name            String
  description     String?
  isActive        Boolean  @default(true)
  scheduledStart  DateTime
  scheduledEnd    DateTime?
  actualStart     DateTime?
  actualEnd       DateTime?
  recordingUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creatorId       String
  courseId        Int
  course          Course   @relation("CourseLiveSessions", fields: [courseId], references: [id])
  creator         User     @relation("LiveSessionCreator", fields: [creatorId], references: [id])
  participants    User[]   @relation("LiveSessionParticipants")
}

model Module {
  id              Int                    @id @default(autoincrement())
  title           String
  description     String
  jsonDescription String
  htmlDescription String
  order           Int
  isCompleted     Boolean                @default(false)
  isLocked        Boolean                @default(false)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  courseId        Int
  course          Course                 @relation("CourseModules", fields: [courseId], references: [id])
  completions     UserModuleCompletion[]
}

model Article {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription String
  htmlDescription String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  authorId        String
  author          User     @relation("ArticleAuthor", fields: [authorId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserModuleCompletion {
  id          Int      @id @default(autoincrement())
  userId      String
  moduleId    Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, moduleId])
}

model PushNotification {
  id         String   @id @default(cuid())
  endpoint   String   @unique
  p256dh     String
  auth       String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VocabularyCollection {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  icon        String?          @default("FaBook")
  isPublic    Boolean          @default(false)
  userId      String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User?            @relation(fields: [userId], references: [id])
  items       VocabularyItem[]
}

model VocabularyItem {
  id           Int                  @id @default(autoincrement())
  korean       String
  indonesian   String
  isChecked    Boolean              @default(false)
  type         VocabularyType      @default(WORD)
  collectionId Int
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  collection   VocabularyCollection @relation(fields: [collectionId], references: [id])
}

model ExcalidrawDrawing {
  id          String   @id @default(cuid())
  name        String
  elements    String   @db.Text    // Serialized Excalidraw elements
  appState    String?  @db.Text    // Serialized Excalidraw app state
  files       String?  @db.Text    // Serialized files data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum VocabularyType {
  WORD
  SENTENCE
}

enum UserRoles {
  GURU
  MURID
  ADMIN
}

enum UserPlan {
  FREE
  PREMIUM
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model KoleksiSoal {
  id         Int      @id @default(autoincrement())
  nama       String
  deskripsi  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  soals      Soal[]
  tryouts    Tryout[]
}

model Soal {
  id             Int         @id @default(autoincrement())
  koleksiId      Int
  authorId       String      // Changed to String to match existing User id type
  pertanyaan     String
  attachmentUrl  String?
  attachmentType String?
  difficulty     Difficulty?
  explanation    String?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  koleksiSoal    KoleksiSoal @relation(fields: [koleksiId], references: [id])
  author         User        @relation("SoalAuthor", fields: [authorId], references: [id])
  opsis          Opsi[]
}

model Opsi {
  id         Int      @id @default(autoincrement())
  soalId     Int
  opsiText   String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  soal       Soal     @relation(fields: [soalId], references: [id])
}

model Tryout {
  id            Int                @id @default(autoincrement())
  nama          String
  startTime     DateTime
  endTime       DateTime
  koleksiSoalId Int
  isActive      Boolean            @default(false) 
  guruId        String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  koleksiSoal   KoleksiSoal        @relation(fields: [koleksiSoalId], references: [id])
  participants  TryoutParticipant[]
}

model TryoutParticipant {
  id          Int       @id @default(autoincrement())
  tryoutId    Int
  userId      String
  score       Int       @default(0)
  submittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tryout      Tryout    @relation(fields: [tryoutId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([tryoutId, userId])
}
