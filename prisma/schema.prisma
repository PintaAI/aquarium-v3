// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  role            UserRoles @default(MURID)
  plan            UserPlan  @default(FREE)
  emailVerified   DateTime?
  image           String?
  password        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  authoredCourses Course[]  @relation("CourseAuthor")
  joinedCourses   Course[]  @relation("CourseMembers")
  authoredArticles Article[] @relation("ArticleAuthor")
  accounts        Account[]
  moduleCompletions UserModuleCompletion[]
  vocabularyCollections VocabularyCollection[] // Relasi baru ke kumpulan kosakata
}

enum UserRoles {
  USER
  GURU
  MURID
  ADMIN
}

enum UserPlan {
  FREE
  PREMIUM
}

model Course {
  id              Int          @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription String?
  htmlDescription String?
  level           CourseLevel
  thumbnail       String?
  icon            String?
  isCompleted     Boolean      @default(false)
  isLocked        Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  author          User         @relation("CourseAuthor", fields: [authorId], references: [id])
  authorId        String
  members         User[]       @relation("CourseMembers")
  modules         Module[]     @relation("CourseModules")
}

model Module {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  jsonDescription  String
  htmlDescription  String
  order            Int
  isCompleted      Boolean  @default(false)
  isLocked         Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  course           Course   @relation("CourseModules", fields: [courseId], references: [id])
  courseId         Int
  completions      UserModuleCompletion[]
}

model Article {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  jsonDescription  String
  htmlDescription  String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  author           User     @relation("ArticleAuthor", fields: [authorId], references: [id])
  authorId         String
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model UserModuleCompletion {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, moduleId])
}

// Model untuk kumpulan kosakata user
model VocabularyCollection {
  id          Int      @id @default(autoincrement())
  title       String   // Judul kumpulan (misal: "Kosakata Makanan")
  description String?  // Deskripsi kumpulan (opsional)
  isPublic    Boolean  @default(false) // Menandai apakah koleksi ini publik
  user        User?    @relation(fields: [userId], references: [id]) // User menjadi optional
  userId      String?  // userId menjadi optional untuk koleksi publik
  items       VocabularyItem[] // Relasi ke item-item kosakata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Model untuk item kosakata dalam kumpulan
model VocabularyItem {
  id          Int                  @id @default(autoincrement())
  korean      String               // Kata dalam bahasa Korea
  indonesian  String               // Arti dalam bahasa Indonesia
  collection  VocabularyCollection @relation(fields: [collectionId], references: [id])
  collectionId Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}
